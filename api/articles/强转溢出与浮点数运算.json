{"title":"强转溢出与浮点数运算","uid":"9f2df5d79e53f31f7ef018d56fc68fb5","slug":"强转溢出与浮点数运算","date":"2021-10-08T17:04:46.000Z","updated":"2024-11-16T08:01:11.356Z","comments":true,"path":"api/articles/强转溢出与浮点数运算.json","keywords":null,"cover":[],"content":"<h3 id=\"java-中的数据类型转换\"><a href=\"#java-中的数据类型转换\" class=\"headerlink\" title=\"java 中的数据类型转换.\"></a>java 中的数据类型转换.</h3><p>在 java 中，存在两种转换的机制，默认类型转换（隐式转换）和强制类型转换。默认类型转换的规则如下：</p>\n<ul>\n<li><p>byte，short，char -&gt; int -&gt;long -&gt;float -&gt;double</p>\n</li>\n<li><p>当 byte，short，char 相互之间不能转换，它们参与运算首先将转换成 int 类型进行运算。</p>\n</li>\n</ul>\n<p>强制类型转换：</p>\n<ul>\n<li>目标类型 变量名 &#x3D; (目标类型)(被转换的类型)</li>\n</ul>\n<p>在进行类型转换时：</p>\n<ol>\n<li>容量大的数据类型转换为容量小的数据类型时，要加上强制转换符，但可能造成精度降低或溢出；使用时要格外注意。</li>\n<li>有多种类型的数据混合运算时，系统首先自动的将所有数据转换成容量最大的那一种数据类型，然后再进行计算。</li>\n</ol>\n<p>byte 的存储范围是-128-127 的整数范围，那么如果有如下语句：</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">byte a <span class=\"hljs-operator\">=</span> (byte)<span class=\"hljs-number\">130</span><span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<p>结果会是多少呢？java 是如何处理强制类型转换的溢出处理呢？</p>\n<p>在计算机中，所有的数据都是存储的补码形式，那么 130 首先被当成 int 型存储，四个字节 32 位，它的补码如下：0000 0000 0000 0000 0000 0000 1000 0010，转换为 byte 类型，进行截取，高字节部分去除，保留低字节部分，得到转换为 byte 类型的补码为：1000 0010，我们将其转换为源码：补码（1000 0010）-&gt;反码（1000 0001）-&gt;原码（1111 1110）为-126，所以最后的答案是-126.如果遇到其他的类型转换，也采用类似的处理方法。</p>\n<p>我们都知道 Java 中基本数据类型中，整型的有<code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code>,依次占用内存空间是<code>1、2、4、8</code>个字节，它们的取值范围如下：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>字节数</th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>byte</td>\n<td>1</td>\n<td>[-128，127]</td>\n</tr>\n<tr>\n<td>short</td>\n<td>2</td>\n<td>[-32768，32767]</td>\n</tr>\n<tr>\n<td>int</td>\n<td>4</td>\n<td>[-2147483648，2147483647]</td>\n</tr>\n<tr>\n<td>long</td>\n<td>8</td>\n<td>[-9223372036854775808，9223372036854775807]</td>\n</tr>\n</tbody></table>\n<p>既然数据有范围，那么就会存在<code>数据溢出</code>的问题，那么我们看下数据溢出了会是怎样的？</p>\n<h4 id=\"原理分析\"><a href=\"#原理分析\" class=\"headerlink\" title=\"原理分析\"></a>原理分析</h4><p>我们知道，整型数据在计算机中都是用<code>二进制</code>表示的。这里我们继续拿 byte 进行举例，比如说<code>1</code>的二进制表示为<code>0000 0001</code>，<code>-1</code>的二进制表示为<code>1000 0001</code>，最高位是<code>符号位</code>，1 表示负数，0 表示正数。</p>\n<p>我们知道<code>byte</code>类型占一个字节，也就是 8bit，那么它应该能表示 128 个数字；除去最高位的符号位后，还有 7 个 bit 来表示数字，也就是<code>[0,127]</code>这个范围，共 128 个数字；如果加上符号位，那么<code>byte</code>可以表示的数的范围是<code>[-127,-0]</code>和<code>[0,127]</code>，-0 和 0 表示的数据相同，我们进行合并，所以范围应该是<code>[-127,127]</code>，而 java 规定的范围是<code>[-128,127]</code>，<code>-128</code>怎么表示的。</p>\n<p>其实<code>-128</code>就是用<code>-0</code>来表示的，二进制的<code>补码</code>表示就是<code>1000 0000</code>。</p>\n<p>接下来我们说下几个基本概念：原码、反码和补码。</p>\n<h4 id=\"原码、反码和补码\"><a href=\"#原码、反码和补码\" class=\"headerlink\" title=\"原码、反码和补码\"></a>原码、反码和补码</h4><p><code>原码</code>：就是数据的二进制表示形式，最高位是符号位，1 表示负数，0 表示正数。</p>\n<p><code>反码</code>：正数的反码跟原码相同；负数的反码是在原码的基础上，符号位不变，其余各位取反，1 变 0，0 变 1。</p>\n<p><code>补码</code>：正数的补码跟原码相同；负数的补码是在其反码的基础上加 1。</p>\n<p>比如说，<code>10</code>的原码是<code>0000 1010</code>，由于它是正数，所以它的反码和补码均与原码相同。 <code>-10</code>的原码是<code>1000 1010</code>；它的反码是<code>在原码基础上，符号位不变，其余位数取反</code>，转换后的反码是<code>1111 0101</code>；补码是<code>在反码的基础上+1</code>，转换后的补码是<code>1111 0110</code>。</p>\n<h4 id=\"加法运算过程拆解\"><a href=\"#加法运算过程拆解\" class=\"headerlink\" title=\"加法运算过程拆解\"></a>加法运算过程拆解</h4><p>在计算机的二进制计算中，<code>减法运算</code>也会转化为<code>加法运算</code>来计算。</p>\n<p>对于<code>10-10=0</code>的这个运算，在实际计算过程中，会将<code>10 - 10</code>的操作转化为<code>10 + (-10)</code>。接下来我们看下具体的运算过程：</p>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>10</th>\n<th>-10</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>原码</td>\n<td><code>0000 1010</code></td>\n<td><code>1000 1010</code></td>\n</tr>\n<tr>\n<td>反码</td>\n<td><code>0000 1010</code></td>\n<td><code>1111 0101</code></td>\n</tr>\n<tr>\n<td>补码</td>\n<td><code>0000 1010</code></td>\n<td><code>1111 0110</code></td>\n</tr>\n</tbody></table>\n<p>得到对应的补码之后，我们对<code>10</code>和<code>-10</code>的补码进行加法操作：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-string\">+</span> <span class=\"hljs-number\">0000 </span><span class=\"hljs-number\">1010</span><br><span class=\"hljs-string\">———————————</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-number\">0000 </span><span class=\"hljs-number\">0000</span><br>  <span class=\"hljs-number\">1111 </span><span class=\"hljs-number\">0110</span><br><span class=\"hljs-string\">复制代码</span><br></code></pre></td></tr></table></figure>\n\n<p>我们知道补码<code>0000 0000</code>对应的原码也为<code>0000 0000</code>，所以可以得出<code>10 - 10 = 0</code>。</p>\n<h4 id=\"验证-byte-127-1-结果\"><a href=\"#验证-byte-127-1-结果\" class=\"headerlink\" title=\"验证(byte)(127 +1)结果\"></a>验证<code>(byte)(127 +1)</code>结果</h4><p>我们接着看下<code>byte</code>类型的<code>127 + 1</code>的运算过程。</p>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>127</th>\n<th>1</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>原码</td>\n<td><code>0111 1111</code></td>\n<td><code>0000 0001</code></td>\n</tr>\n<tr>\n<td>反码</td>\n<td><code>0111 1111</code></td>\n<td><code>0000 0001</code></td>\n</tr>\n<tr>\n<td>补码</td>\n<td><code>0111 1111</code></td>\n<td><code>0000 0001</code></td>\n</tr>\n</tbody></table>\n<p>得到对应的补码之后，我们对相应的补码进行加法操作：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-string\">+</span> <span class=\"hljs-number\">0111 </span><span class=\"hljs-number\">1111</span><br><span class=\"hljs-string\">———————————</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-number\">1000 </span><span class=\"hljs-number\">0000</span><br>  <span class=\"hljs-number\">0000 </span><span class=\"hljs-number\">0001</span><br><span class=\"hljs-string\">复制代码</span><br></code></pre></td></tr></table></figure>\n\n<p>这里我们得到了<code>1000 0000</code>这个补码，而这个补码对应的数据就是<code>-128</code>，这是一个特例。</p>\n<p>这里需要注意的是，因为使用以前的<code>-0</code>的补码来表示<code>-128</code>, 所以<code>-128</code>并没有原码和反码表示。(对-128 的补码表示<code>[1000 0000]</code>补算出来的原码是<code>[0000 0000]</code>, 这是不正确的)。</p>\n<p>浮点数运算和整数运算相比，只能进行加减乘除这些数值计算，不能做位运算和移位运算。</p>\n<p>在计算机中，浮点数虽然表示的范围大，但是，浮点数有个非常重要的特点，就是浮点数常常无法精确表示。</p>\n<p>举个栗子：</p>\n<p>浮点数<code>0.1</code>在计算机中就无法精确表示，因为十进制的<code>0.1</code>换算成二进制是一个无限循环小数，很显然，无论使用<code>float</code>还是<code>double</code>，都只能存储一个<code>0.1</code>的近似值。但是，<code>0.5</code>这个浮点数又可以精确地表示。</p>\n<p>因为浮点数常常无法精确表示，因此，浮点数运算会产生误差：</p>\n<h1 id=\"电脑是怎样储存一个整数的-Integer\"><a href=\"#电脑是怎样储存一个整数的-Integer\" class=\"headerlink\" title=\"电脑是怎样储存一个整数的(Integer)\"></a>电脑是怎样储存一个整数的(Integer)</h1><p>在讲为什么会存在浮点误差之前，先来谈谈电脑是怎么用 0 跟 1 来表示一个 <strong>整数</strong> 的，大家应该都知道二进制：例如 <code>101</code> 代表 $2^2 + 2^0$ 也就是 5、<code>1010</code> 代表 $2^3 + 2^1$ 也就是 10。</p>\n<p><img src=\"https://img.formels.top/image/202411061456484.png\"></p>\n<p>如果是一个无符号的 32 bit 整数，代表它有 32 个位置可以放 0 或 1，所以最小值就是 <code>0000...0000</code> 也就是 0，而最大值 <code>1111...1111</code> 代表 $2^{31} + 2^{30} + … + 2^1 + 2^0$ 也就是 4294967295</p>\n<p>从排列组合的角度来看，因为每一个 bit 位都可以是 0 或 1，整个变量的值有 $2^{32}$ 种可能，所以可以 <strong>精确的</strong> 表达出 0 到 $2^{23} - 1$ 之间的任一个值，不会有任何误差。</p>\n<h1 id=\"浮点数-Floating-Point\"><a href=\"#浮点数-Floating-Point\" class=\"headerlink\" title=\"浮点数(Floating Point)\"></a>浮点数(Floating Point)</h1><p>虽然从 0 到 $2^{23} - 1$ 之间存在很多个整数，但其数量终究是 <strong>有限</strong> 的，就是 $2^{32}$ 那么多个而已；但浮点数就不同了，我们可以这样想：在 1 到 10 这个区间中只有十个整数，却有 <strong>无穷多个</strong> 浮点数，例如 5.1、5.11、5.111 等等，怎么也列举不完。</p>\n<p>但因为在 32 bit 的空间中就只有 2³² 种可能性，为了把所有浮点数都塞在这个 32 bit 的空间里面，许多 CPU 厂商发明了各种浮点数的表示方式，但如果每家 CPU 的格式都不一样也很麻烦，所以最后是以 <a href=\"https://link.segmentfault.com/?enc=GMa5PvBh+EdBrhkLW9lknQ==.hq84dRUaWkMUL+vwKQXx/tpvQ3LYbxKo+NmrCclmw8WYclzBVH8rjNOfQ60firg54Rk3usilCMEM/xgn2rWvUVbEtQPP5w4u1nehML7kybet8v0Vnf2lQ4Bd485pohIUHvImE5C6b5BKgTsbrlvt1A==\">IEEE</a> 发布的 <a href=\"https://link.segmentfault.com/?enc=RS87AVeCLnK3VvpawDirEQ==.O/Qc3M8TOzxMVK2nzCpYqlH/hwRX8utjzXdsGsgkqPKArzn8RN2tg6plsoXOhLY5\">IEEE 754</a> 作为通用的浮点数运算标准，现在的 CPU 也都遵循这个标准进行设计。</p>\n<h1 id=\"IEEE-754\"><a href=\"#IEEE-754\" class=\"headerlink\" title=\"IEEE 754\"></a>IEEE 754</h1><p>IEEE 754 里面定义了很多东西，其中包括单精度（32 bit）、双精度（64 bit）和特殊值（无穷大、NaN）的表示方式等等</p>\n<h2 id=\"规格化\"><a href=\"#规格化\" class=\"headerlink\" title=\"规格化\"></a>规格化</h2><p>以 8.5 这个浮点数来说，如果要变成 IEEE 754 格式的话必须先做一些规格化处理：把 8.5 拆成 8 + 0.5 也就是 $2^3 + (\\cfrac{1}{2})^1$ ，接着写成二进位变成 <code>1000.1</code>，最后再写成 $1.0001 \\times 2^3$，与十进制的科学记数法很相似。</p>\n<h2 id=\"单精度浮点数\"><a href=\"#单精度浮点数\" class=\"headerlink\" title=\"单精度浮点数\"></a>单精度浮点数</h2><p>在 IEEE 754 中 32 bit 浮点数被拆分成三个部分，分别是 数符（sign）、阶码（exponent） 和尾数（fraction），加起来总共是 32 个 bit</p>\n<p><img src=\"https://img.formels.top/image/202411061456179.png\"></p>\n<ul>\n<li>数符（sign）：最左侧的 1 bit 代表正负号，正数的话 sign 就为 0，反之则是 1</li>\n<li>阶码（exponent）：中间的 8 bit 代表规格化之后的次方数，采用的是 <strong>阶码真值 +127</strong> 的格式，也就是 3 还要再加上 127 等于 130</li>\n<li>尾数（fraction）：最右侧的 23 bit 放的是小数部分，以 <code>1.0001</code> 来说就是去掉 <code>1.</code> 之后的 <code>0001</code></li>\n</ul>\n<p>所以如果把 8.5 表示成 32 bit 格式的话应该是这样：</p>\n<p><img src=\"https://img.formels.top/image/202411061456454.png\"></p>\n<h2 id=\"什么情况下会产生误差？\"><a href=\"#什么情况下会产生误差？\" class=\"headerlink\" title=\"什么情况下会产生误差？\"></a>什么情况下会产生误差？</h2><p>前面举的 8.5 的例子可以表示为 $2^3 + (\\cfrac{1}{2})^1$ ，是因为 8 和 0.5 刚好都是 2 的次方数，所以完全不会产生任何精准度问题。</p>\n<p>但如果是 8.9 的话因为没办法换成 2 的次方数相加，所以最后会被迫表示成 $1.0001110011… \\times 2^3$，而且还会产生大概 $0.0000003$ 的误差，如果对结果好奇的话可以到 <a href=\"https://link.segmentfault.com/?enc=xXrFiGGqitQzX0jigVJ7pw==.6AjLqmqz2hu6uz0S5NIq/eTX2VwObRQ+CU3IXxL1cYMRiLLoU75yPghNyJFMXA6SFv/zvwV6nMscwzMp7ZnYlQ==\">IEEE-754 Floating Point Converter</a> 网站上玩玩看。</p>\n<h2 id=\"双精度浮点数\"><a href=\"#双精度浮点数\" class=\"headerlink\" title=\"双精度浮点数\"></a>双精度浮点数</h2><p>前面所讲的单精度浮点数只用了 32 bit 来表示，为了让误差更小，IEEE 754 也定义了如何用 64 bit 来表示浮点数，跟 32 bit 比起来 fraction 部分扩大了两倍多，从 23 bit 变成 52 bit，所以精准度自然会提高许多。</p>\n<p><img src=\"https://img.formels.top/image/202411061457992.png\"></p>\n<p>以刚才的 8.9 为例，用 64 bit 表示的话虽然可以变得更准，但因为 8.9 无法完全写成 2 的次方数相加，到了小数下 16 位仍然会出现误差，不过与单精度的误差 0.0000003 比起来已经小了很多</p>\n<p><img src=\"https://img.formels.top/image/202411061457357.png\"></p>\n<p>类似的情况还有像 Python 中的 <code>1.0</code> 跟 <code>0.999...999</code> 是相等的、<code>123</code> 跟 <code>122.999...999</code> 也是相等的，因为他们之间的差距已经小到无法放在 fraction 里面，所以从二进制格式看来它们每一个二进制位都是一样的。</p>\n<p><img src=\"https://img.formels.top/image/202411061457391.png\"></p>\n<h1 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h1><p>既然浮点数的误差是无法避免的，那就只好跟它共处了，下面是两个比较常见的处理方法：</p>\n<h2 id=\"设定最大允许误差-ε-epsilon\"><a href=\"#设定最大允许误差-ε-epsilon\" class=\"headerlink\" title=\"设定最大允许误差 ε (epsilon)\"></a>设定最大允许误差 ε (epsilon)</h2><p>在某些语言会提供所谓的 epsilon，用来让你判断是不是在浮点误差的允许范围内，以 Python 来说 epsilon 的值大约是 $2.2e^{-16}$</p>\n<p><img src=\"https://img.formels.top/image/202411061457460.png\"></p>\n<p>所以你可以把 <code>0.1 + 0.2 == 0.3</code> 改写成 <code>0.1 + 0.2 — 0.3 &lt;= epsilon</code>，这样就能避免浮点误差在运算过程中捣乱，正确的比较出 0.1 加 0.2 是不是等于 0.3 了。</p>\n<blockquote>\n<p>当然如果系统没提供的话你也可以自己定义一个 epsilon，设定在 2 的 -15 次方左右</p>\n</blockquote>\n<h2 id=\"完全使用十进制进行计算\"><a href=\"#完全使用十进制进行计算\" class=\"headerlink\" title=\"完全使用十进制进行计算\"></a>完全使用十进制进行计算</h2><p>之所以会有浮点误差，是因为把十进制转为二进制的过程中没办法把所有的小数部分都塞进了尾数中，既然转换可能会有误差，那干脆就不转了，直接用十进制来做运算。</p>\n<p>在 Python 里面有一个 module 叫做 <a href=\"https://link.segmentfault.com/?enc=EGqzPiHvOGHU5YymrWlxKw==.8AEYfFMlIGJ/8spbR0ywxxV+rdFNfmvm+jodZzcUm5k5eBGb05+GlQKMii02WfXa+8pfz2yV6OoysUDEWJz5WA==\">decimal</a>，在 JavaScript 中也有类似的包。它可以帮你用十进制来进行计算，就像你自己用纸笔计算 0.1 + 0.2 绝对不会出错、也不会有任何误差。</p>\n<p><img src=\"https://img.formels.top/image/202411061458514.png\"></p>\n<p>虽然用十进制进行计算可以完全避免浮点数的误差，但因为 Decimal 的十进制计算是模拟出来的，在最底层的 CPU 电路中还是在用二进制进行运算，执行起来会比原生的浮点运算慢很多，所以不建议所有的浮点运算都用 Decimal 来进行。</p>\n","text":"java 中的数据类型转换.在 java 中，存在两种转换的机制，默认类型转换（隐式转换）和强制类型转换。默认类型转换的规则如下： byte，short，cha...","permalink":"/post/强转溢出与浮点数运算","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[{"name":"Java","slug":"Java","count":2,"path":"api/categories/Java.json"}],"tags":[{"name":"Java","slug":"Java","count":1,"path":"api/tags/Java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#java-%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">java 中的数据类型转换.</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90\"><span class=\"toc-text\">原理分析</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%A0%81%E3%80%81%E5%8F%8D%E7%A0%81%E5%92%8C%E8%A1%A5%E7%A0%81\"><span class=\"toc-text\">原码、反码和补码</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8A%A0%E6%B3%95%E8%BF%90%E7%AE%97%E8%BF%87%E7%A8%8B%E6%8B%86%E8%A7%A3\"><span class=\"toc-text\">加法运算过程拆解</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%AA%8C%E8%AF%81-byte-127-1-%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\">验证(byte)(127 +1)结果</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%94%B5%E8%84%91%E6%98%AF%E6%80%8E%E6%A0%B7%E5%82%A8%E5%AD%98%E4%B8%80%E4%B8%AA%E6%95%B4%E6%95%B0%E7%9A%84-Integer\"><span class=\"toc-text\">电脑是怎样储存一个整数的(Integer)</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%B5%AE%E7%82%B9%E6%95%B0-Floating-Point\"><span class=\"toc-text\">浮点数(Floating Point)</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#IEEE-754\"><span class=\"toc-text\">IEEE 754</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%84%E6%A0%BC%E5%8C%96\"><span class=\"toc-text\">规格化</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8D%95%E7%B2%BE%E5%BA%A6%E6%B5%AE%E7%82%B9%E6%95%B0\"><span class=\"toc-text\">单精度浮点数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%B8%8B%E4%BC%9A%E4%BA%A7%E7%94%9F%E8%AF%AF%E5%B7%AE%EF%BC%9F\"><span class=\"toc-text\">什么情况下会产生误差？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%8C%E7%B2%BE%E5%BA%A6%E6%B5%AE%E7%82%B9%E6%95%B0\"><span class=\"toc-text\">双精度浮点数</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">解决方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E5%AE%9A%E6%9C%80%E5%A4%A7%E5%85%81%E8%AE%B8%E8%AF%AF%E5%B7%AE-%CE%B5-epsilon\"><span class=\"toc-text\">设定最大允许误差 ε (epsilon)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E5%85%A8%E4%BD%BF%E7%94%A8%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BF%9B%E8%A1%8C%E8%AE%A1%E7%AE%97\"><span class=\"toc-text\">完全使用十进制进行计算</span></a>","author":{"name":"Gao","slug":"blog-author","avatar":"/img/favicon.ico","link":"/","description":"一些收集总结","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"ZeroTier内网穿透","uid":"d69aa1e30531a17bb9e8d7f557b88657","slug":"os/zerotier","date":"2024-11-11T06:58:47.000Z","updated":"2024-11-16T08:01:11.356Z","comments":true,"path":"api/articles/os/zerotier.json","keywords":null,"cover":null,"text":"使用 ZeroTier 实现内网穿透安装及配置查看其他教程如何实现直连 主要需要开启 ipv6，开启 ipv6 后可以打洞实现直连，提升连接体验，现在大部分运营...","permalink":"/post/os/zerotier","photos":[],"count_time":{"symbolsCount":194,"symbolsTime":"1 mins."},"categories":[{"name":"os","slug":"os","count":3,"path":"api/categories/os.json"}],"tags":[{"name":"内网穿透","slug":"内网穿透","count":1,"path":"api/tags/内网穿透.json"}],"author":{"name":"Gao","slug":"blog-author","avatar":"/img/favicon.ico","link":"/","description":"一些收集总结","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"黑苹果优化","uid":"bc1fb47b9cf98affb24c2221bfc0ad99","slug":"hackintosh/黑苹果优化","date":"2021-08-30T21:35:55.000Z","updated":"2024-11-16T08:01:11.348Z","comments":true,"path":"api/articles/hackintosh/黑苹果优化.json","keywords":null,"cover":null,"text":"黑果优化 命令调试检查 12345678# 检查 XCPM 是否正常加载，返回 1为正常$ sysctl machdep.xcpm.mode# 验证 X86Pl...","permalink":"/post/hackintosh/黑苹果优化","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"hackintosh","slug":"hackintosh","count":1,"path":"api/categories/hackintosh.json"}],"tags":[{"name":"hackintosh","slug":"hackintosh","count":1,"path":"api/tags/hackintosh.json"}],"author":{"name":"Gao","slug":"blog-author","avatar":"/img/favicon.ico","link":"/","description":"一些收集总结","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}