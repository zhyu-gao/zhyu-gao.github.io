{"title":"深入理解 JVM 之 垃圾回收机制","uid":"1856d3fe3ee680c79f813e9ac26f130d","slug":"java/深入理解-JVM-之-垃圾回收机制","date":"2020-04-27T21:28:19.000Z","updated":"2024-11-16T08:01:11.352Z","comments":true,"path":"api/articles/java/深入理解-JVM-之-垃圾回收机制.json","keywords":null,"cover":[],"content":"<p>转自 <a href=\"https://juejin.im/post/5c73c7c96fb9a049dd80eedb\">https://juejin.im/post/5c73c7c96fb9a049dd80eedb</a></p>\n<h1 id=\"深入理解-JVM-之-垃圾回收机制\"><a href=\"#深入理解-JVM-之-垃圾回收机制\" class=\"headerlink\" title=\"深入理解 JVM 之 垃圾回收机制\"></a>深入理解 JVM 之 垃圾回收机制</h1><p>虽然内存的分配和回收技术已相当成熟，但如果需要排查内存溢出、内存泄露问题，或者要求高并发、高性能时，就需要对垃圾的回收进行监控和调节，以更好优化系统提高性能。</p>\n<h2 id=\"对象存活判定\"><a href=\"#对象存活判定\" class=\"headerlink\" title=\"对象存活判定\"></a>对象存活判定</h2><p><code>Java</code> 内存结构中，程序计数器、虚拟机栈、本地方法栈等随着线程而生，随线程而灭，不需要考虑内存回收问题。而 <code>Java</code> 堆和方法区则不同，它们的内存分配是动态的，只有在运行期间才能知道会创建哪些对象，垃圾回收关注的就是这两部分。</p>\n<p>垃圾回收首先需要判断哪些对象还存活着，主要有引用计数和可达性分析两种算法。</p>\n<h3 id=\"引用计数算法\"><a href=\"#引用计数算法\" class=\"headerlink\" title=\"引用计数算法\"></a>引用计数算法</h3><p>它的原理如下：给对象添加一个引用计数器，每当有一个地方引用它时，计时器值就加 <code>1</code>；当引用失效时，计数器值就减 <code>1</code>；如果计数器为 0，对象就不可能再被使用。</p>\n<p>引用计数算法虽然实现简单、判定效率较高。但它很难解决对象之间循环引用的问题。</p>\n<p>例如两个对象相互引用，实际上两个对象都不会再访问，但因为相互引用着对方，导致它们的计数器值都不为 <code>0</code>，于是引用技术算法无法通过 <code>GC</code> 收集器回收它们。</p>\n<h3 id=\"可达性分析算法\"><a href=\"#可达性分析算法\" class=\"headerlink\" title=\"可达性分析算法\"></a>可达性分析算法</h3><p>它的原理如下：通过一系列称为 <code>GC Roots</code> 的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链。当一个对象到 <code>GC Roots</code> 没有任何引用链相连时，则证明对象是不可用的。</p>\n<p><code>Java</code> 中，可作为 <code>GC Roots</code> 的对象包括如下几种：</p>\n<ul>\n<li>虚拟机栈（栈帧中的本地变量表）中引用的对象；</li>\n<li>方法区中类静态属性引用的对象；</li>\n<li>方法区中常量引用的对象；</li>\n<li>本地方法栈中 <code>JNI</code>( <code>Native</code> 方法) 引用的对象。</li>\n</ul>\n<h3 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h3><p>可以看到，对象回收判定算法判断对象是否存活都与引用有关。从 <code>JDK1.2</code> 开始，引用分为四种类型，用来实现不同的功能，它们的引用强度也依次递减。</p>\n<p><strong>强引用（Strong Reference）</strong></p>\n<p>平时使用的引用就是强引用。只要强引用还存在，该对象永远不会被回收。</p>\n<p>可以通过将对象设置为 <code>null</code>，使其被回收。</p>\n<p><strong>软引用（Soft Reference）</strong></p>\n<p>用于描述一些还有用但并非必需的对象。当系统内存空间不足时，会回收这些软引用指向的对象。它通过 <code>SoftReference</code> 类来实现软引用。</p>\n<p>可以用来实现高速缓存。</p>\n<p><strong>弱引用（Weak Reference）</strong></p>\n<p>用来描绘非必需对象。被弱引用指向的对象只能生存到下一次垃圾回收之前。只要垃圾收集器运行，弱引用指向的对象就会被回收。它通过 <code>WeakReference</code> 类来实现弱引用。</p>\n<p><strong>虚引用（Phantom Reference）</strong></p>\n<p>虚引用和没有引用没有任何区别。一个对象是否有虚引用，不会影响其生存时间，也无法通过虚引用获取对象实例。它通过 <code>PhantomReference</code> 来实现虚引用。必须和引用队列 <code>ReferenceQueue</code> 联合使用。</p>\n<p>为一个对象设置虚引用的唯一目的是该对象被垃圾收集器回收前会收到一条系统通知。</p>\n<h3 id=\"回收方法区\"><a href=\"#回收方法区\" class=\"headerlink\" title=\"回收方法区\"></a>回收方法区</h3><p>方法区，或者说 <code>HotSpot</code> 虚拟机中的永久代，进行垃圾回收的效率一般比较低。回收主要包括两部分内容：废弃常量和无用的类。</p>\n<p>判断一个常量是否是废弃常量比较简单，与回收 <code>Java</code> 堆中的对象类似。而判定一个类是否是无用的类需要满足三个条件：</p>\n<ul>\n<li>该类所有的实例都已经被回收；</li>\n<li>加载该类的 <code>ClassLoader</code> 已经被回收；</li>\n<li>该类对象的 <code>java.lang.Class</code> 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</li>\n</ul>\n<h2 id=\"垃圾收集算法\"><a href=\"#垃圾收集算法\" class=\"headerlink\" title=\"垃圾收集算法\"></a>垃圾收集算法</h2><h3 id=\"标记-清除算法（Mark-Sweep）\"><a href=\"#标记-清除算法（Mark-Sweep）\" class=\"headerlink\" title=\"标记-清除算法（Mark-Sweep）\"></a>标记-清除算法（Mark-Sweep）</h3><p>标记-清除算法分为两个标记和清除阶段：首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。标记过程也就是对象存活判定算法。</p>\n<p><img src=\"/images/java/jvm/%E4%B8%8B%E8%BD%BD.jpeg\" alt=\"img\"></p>\n<p>它是最基础的收集算法，主要有两个缺点：</p>\n<ul>\n<li>效率问题：标记和清除两个过程的效率都不高。</li>\n<li>空间问题：标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程序运行过程中需要分配较大的对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</li>\n</ul>\n<h3 id=\"复制算法（Copying）\"><a href=\"#复制算法（Copying）\" class=\"headerlink\" title=\"复制算法（Copying）\"></a>复制算法（Copying）</h3><p>复制算法将可用内存分为大小相等的两块，每次只使用其中的一块。在一块内存用完后，将仍存活的对象赋值到另一块上面，再把已使用过的内存一次清理掉。</p>\n<p><img src=\"/images/java/jvm/%E4%B8%8B%E8%BD%BD1.jpeg\" alt=\"img\"></p>\n<p>复制算法的优缺点如下：</p>\n<ul>\n<li>优点：每次对半个分区进行内存回收，内存分配时也不用考虑内存碎片等情况，实现简单，运行高效。</li>\n<li>缺点：可使用的内存缩小为一半，代价较大。</li>\n</ul>\n<h3 id=\"标记-整理算法（Mark-compact）\"><a href=\"#标记-整理算法（Mark-compact）\" class=\"headerlink\" title=\"标记-整理算法（Mark-compact）\"></a>标记-整理算法（Mark-compact）</h3><p>标记-整理算法分为标记和整理两个阶段，标记阶段和“标记-清除算法”一样，但在整理阶段，不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。</p>\n<p><img src=\"/images/java/jvm/%E4%B8%8B%E8%BD%BD2.jpeg\" alt=\"img\"></p>\n<p>标记-整理算法的优缺点如下：</p>\n<ul>\n<li>避免了空间碎片，空间利用率较高。</li>\n<li>效率不高，标记和清除过程的效率较低。</li>\n</ul>\n<h3 id=\"分代算法（Generational-Collection）\"><a href=\"#分代算法（Generational-Collection）\" class=\"headerlink\" title=\"分代算法（Generational Collection）\"></a>分代算法（Generational Collection）</h3><p>分代算法根据对象存活周期将内存划分为几块。一般是将 <code>Java</code> 对分为新生代和老年代，根据各个年代的特点采用适当的收集算法。</p>\n<p>新生代中，每次垃圾收集时只有少量对象存活，选择复制算法；老年代中，对象存活率较高、没有额外空间进行分配，使用“标记-清理”或“标记-整理”算法。</p>\n<p>为了对不同生命周期的对象采用不同的回收算法，所以垃圾收集器都采用分代收集算法，将堆分为新生代和老年代。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/2/25/1692444b2c55f1f5?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"img\"></p>\n<h2 id=\"内存分配和回收策略\"><a href=\"#内存分配和回收策略\" class=\"headerlink\" title=\"内存分配和回收策略\"></a>内存分配和回收策略</h2><h3 id=\"新生代\"><a href=\"#新生代\" class=\"headerlink\" title=\"新生代\"></a>新生代</h3><p>新生代主要用来存放新创建的对象，一般占堆 <code>1/3</code> 的空间。由于很多对象生命周期很短，每次 <code>Minor GC</code> 后只有少量对象存活，所以选用复制算法。</p>\n<p>新生代又被分为一块较大的 <code>Eden</code> 区和两块较小的大小相等的 <code>Survivor</code> 区，使用 <code>from</code> 和 <code>to</code>来分别指代两个 <code>Survivor</code> 区。<code>HotSpot</code> 虚拟机默认 <code>Eden</code> 和两块 <code>Survivor</code> 的大小比例为 <code>8:1:1</code>。每次只会使用 <code>Eden</code> 和其中一块 <code>Survivor</code> 区为对象服务，所以总是有一块 <code>Survivor</code>区是空闲的，新生代实际可用的内存空间也就为 <code>90%</code>。</p>\n<p>通常，对象会分配在 <code>Eden</code> 区中，当 <code>Eden</code> 区无法在分配对象时，<code>JVM</code> 便会触发一次 <code>Minor GC</code>，将存活下来的对象复制到 <code>from</code> 指向的 <code>Survivor</code> 区中。</p>\n<p>当 <code>from</code> 指向的 <code>Survivor</code> 区也无法分配时，对 <code>Eden</code> 和 <code>from</code> 指向的 <code>Survivor</code> 区执行 <code>Minor GC</code>，将存活下来的对象复制到 <code>to</code> 指向的 <code>Survivor</code> 区中，然后交换 <code>from</code> 和 <code>to</code> 指针，使 <code>to</code>指向的 <code>Survivor</code> 区为空，以保证下次 <code>Minor GC</code> 有复制的空闲空间。</p>\n<h3 id=\"老年代\"><a href=\"#老年代\" class=\"headerlink\" title=\"老年代\"></a>老年代</h3><p>老年代用于存放大对象，或年龄超过一定程度的对象。一般占据堆 <code>2/3</code> 的空间。</p>\n<p>如果对象需要大量连续的内存空间，例如很长的字符串及数组，这些对象会直接分配在老年代，以避免在 <code>Eden</code> 区及两个 <code>Survivor</code> 区之间发生大量的内存复制。</p>\n<p>虚拟机为每个对象定义了一个对象年龄计数器，如果对象分配在 <code>Eden</code> 区，在经过一次 <code>Minor GC</code>后仍然存活，之后移动到 <code>Survivor</code> 空间中，将其年龄设置为 <code>1</code>。对象在 <code>Survivor</code> 区中每经过一次 <code>Minor GC</code>，年龄就增加一次，当它的年龄增加到一定程度（默认为 <code>15</code>）时，也会被晋升到老年代中。</p>\n<p>如果在 <code>Survivor</code> 区中相同年龄所有对象大小的总和大于 <code>Survivor</code> 区的一半，年龄大于或等于该年龄的对象就可以直接进入老年代。</p>\n<p>老年代的对象一般都比较稳定，<code>Major GC</code> 不会频繁执行。<code>Major GC</code> 采用标记—清除算法：首先扫描一次所有老年代，标记出存活的对象，然后回收没有标记的对象。<code>MajorGC</code> 的耗时较长，而且会产生内存碎片。</p>\n<h3 id=\"三种清理方式\"><a href=\"#三种清理方式\" class=\"headerlink\" title=\"三种清理方式\"></a>三种清理方式</h3><p><strong>Minor GC(Young GC)</strong></p>\n<p>指发生在新生代的垃圾收集动作。当 <code>Eden</code> 区没有足够的空间分配时，就会触发一次 <code>Minor GC</code>。由于 <code>Java</code> 对象大多生命周期较短，所以 <code>Minor GC</code> 非常频繁，一般回收速度也比较快。</p>\n<p><strong>Major GC</strong></p>\n<p>指发生在老年代的垃圾收集动作，在进行 <code>Major GC</code> 前，一般都会进行至少一次 <code>Minor GC</code>。<code>Major GC</code> 的速度一般会比 <code>Minor GC</code> 慢 <code>10</code> 倍以上。</p>\n<p><strong>Full GC</strong></p>\n<p>指回收整个新生代和老年代的垃圾收集动作。成本较高，对系统性能产生影响。<code>FULL GC</code> 的时候会 <code>STOP THE WORD</code>。</p>\n<p>它的触发条件主要有：</p>\n<ul>\n<li>在执行 <code>Minor GC</code> 之前，如果老年代最大可用的连续空间小于历次晋升到老生代对象的平均大小，则触发一次 <code>Full GC</code> 。</li>\n<li>大对象直接进入老年代，或从年轻代晋升上来的老对象，在老年代尝试分配内存，但老年代内存空间不够时。</li>\n<li>显式调用 <code>System.gc()</code> 方法时。</li>\n</ul>\n","text":"转自 https://juejin.im/post/5c73c7c96fb9a049dd80eedb 深入理解 JVM 之 垃圾回收机制虽然内存的分配和回收技术...","permalink":"/post/java/深入理解-JVM-之-垃圾回收机制","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"java","slug":"java","count":3,"path":"api/categories/java.json"}],"tags":[{"name":"jvm","slug":"jvm","count":1,"path":"api/tags/jvm.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-JVM-%E4%B9%8B-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">深入理解 JVM 之 垃圾回收机制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E8%B1%A1%E5%AD%98%E6%B4%BB%E5%88%A4%E5%AE%9A\"><span class=\"toc-text\">对象存活判定</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">引用计数算法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E8%BE%BE%E6%80%A7%E5%88%86%E6%9E%90%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">可达性分析算法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">引用类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9B%9E%E6%94%B6%E6%96%B9%E6%B3%95%E5%8C%BA\"><span class=\"toc-text\">回收方法区</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">垃圾收集算法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%87%E8%AE%B0-%E6%B8%85%E9%99%A4%E7%AE%97%E6%B3%95%EF%BC%88Mark-Sweep%EF%BC%89\"><span class=\"toc-text\">标记-清除算法（Mark-Sweep）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%8D%E5%88%B6%E7%AE%97%E6%B3%95%EF%BC%88Copying%EF%BC%89\"><span class=\"toc-text\">复制算法（Copying）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%87%E8%AE%B0-%E6%95%B4%E7%90%86%E7%AE%97%E6%B3%95%EF%BC%88Mark-compact%EF%BC%89\"><span class=\"toc-text\">标记-整理算法（Mark-compact）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E4%BB%A3%E7%AE%97%E6%B3%95%EF%BC%88Generational-Collection%EF%BC%89\"><span class=\"toc-text\">分代算法（Generational Collection）</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%92%8C%E5%9B%9E%E6%94%B6%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">内存分配和回收策略</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B0%E7%94%9F%E4%BB%A3\"><span class=\"toc-text\">新生代</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%80%81%E5%B9%B4%E4%BB%A3\"><span class=\"toc-text\">老年代</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%89%E7%A7%8D%E6%B8%85%E7%90%86%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">三种清理方式</span></a></li></ol></li></ol></li></ol>","author":{"name":"Gao","slug":"blog-author","avatar":"/img/favicon.ico","link":"/","description":"一些收集总结","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Resume","uid":"b6a9caeeb7241bffd17076a1e5fbb45c","slug":"resume","date":"2020-07-27T22:23:31.000Z","updated":"2024-11-16T08:01:11.356Z","comments":true,"path":"api/articles/resume.json","keywords":null,"cover":null,"text":"","permalink":"/post/resume","photos":[],"count_time":{"symbolsCount":0,"symbolsTime":"1 mins."},"categories":[{"name":"resume","slug":"resume","count":1,"path":"api/categories/resume.json"}],"tags":[{"name":"resume","slug":"resume","count":1,"path":"api/tags/resume.json"}],"author":{"name":"Gao","slug":"blog-author","avatar":"/img/favicon.ico","link":"/","description":"一些收集总结","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Wsl","uid":"5e487e249d6b6207e7d21f7db089653a","slug":"os/wsl","date":"2020-04-27T21:27:34.000Z","updated":"2024-11-16T08:01:11.354Z","comments":true,"path":"api/articles/os/wsl.json","keywords":null,"cover":null,"text":"创建启动脚本 进入任意 WSL 发行版本中,创建并编辑文件: /etc/init.wsl 1234#! /bin/sh/etc/init.d/cron $1/e...","permalink":"/post/os/wsl","photos":[],"count_time":{"symbolsCount":532,"symbolsTime":"1 mins."},"categories":[{"name":"os","slug":"os","count":3,"path":"api/categories/os.json"}],"tags":[{"name":"wsl","slug":"wsl","count":1,"path":"api/tags/wsl.json"}],"author":{"name":"Gao","slug":"blog-author","avatar":"/img/favicon.ico","link":"/","description":"一些收集总结","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}