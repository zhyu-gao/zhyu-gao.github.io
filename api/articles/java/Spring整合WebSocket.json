{"title":"Spring整合WebSocket","uid":"7a05e9f0505455fe4ba151c28ae4d236","slug":"java/Spring整合WebSocket","date":"2021-03-26T22:22:51.000Z","updated":"2024-11-16T08:01:11.352Z","comments":true,"path":"api/articles/java/Spring整合WebSocket.json","keywords":null,"cover":[],"content":"<h3 id=\"Spring-整合-websocket-设置\"><a href=\"#Spring-整合-websocket-设置\" class=\"headerlink\" title=\"Spring 整合 websocket 设置\"></a>Spring 整合 websocket 设置</h3><blockquote>\n<p>Maven 添加 Jar 包</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!-- spring websocket --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-websocket<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-messaging<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- websocket end --&gt;</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Spring xml 配置方式</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!-- websocket 配置 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">websocket:message-broker</span> <span class=\"hljs-attr\">application-destination-prefix</span>=<span class=\"hljs-string\">&quot;/app&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">websocket:stomp-endpoint</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">&quot;/websocket&quot;</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">websocket:sockjs</span> /&gt;</span><br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">websocket:stomp-endpoint</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">websocket:simple-broker</span> <span class=\"hljs-attr\">prefix</span>=<span class=\"hljs-string\">&quot;/topic&quot;</span>/&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">websocket:client-inbound-channel</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">websocket:interceptors</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;net.example.projects.web.WebSocketInterceptor&quot;</span>/&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">websocket:interceptors</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">websocket:client-inbound-channel</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">websocket:message-broker</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- websocket end --&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>此处启用 stomp</p>\n<p><code>STOMP</code> 中文为: 面向消息的简单文本协议</p>\n<p><code>websocket</code>定义了两种传输信息类型:<strong>文本信息和二进制信息</strong>。类型虽然被确定，但是他们的传输体是没有规定的。所以，需要用一种简单的文本传输类型来规定传输内容，它可以作为通讯中的文本传输协议。</p>\n<p>STOMP 是基于帧的协议，客户端和服务器使用 STOMP 帧流通讯</p>\n<p>一个 STOMP 客户端是一个可以以两种模式运行的用户代理，可能是同时运行两种模式。</p>\n<ul>\n<li>作为生产者，通过<code>SEND</code>框架将消息发送给服务器的某个服务</li>\n<li>作为消费者，通过<code>SUBSCRIBE</code>制定一个目标服务，通过<code>MESSAGE</code>框架，从服务器接收消息。</li>\n</ul>\n<p>基于 websocket 的一层 STOMP 封装，让业务端只需关心数据本身，不需要太过关心文本协议。当然还是需要了解一些 STOMP 协议各个 Frame 的概念和应用场景。</p>\n<blockquote>\n<p>拦截器配置</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WebSocketInterceptor</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">ChannelInterceptorAdapter</span> &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Message&lt;?&gt; preSend(Message&lt;?&gt; message, MessageChannel channel) &#123;<br>        <span class=\"hljs-type\">StompHeaderAccessor</span> <span class=\"hljs-variable\">accessor</span> <span class=\"hljs-operator\">=</span> MessageHeaderAccessor.getAccessor(message, StompHeaderAccessor.class);<br>        <span class=\"hljs-comment\">//1、判断是否首次连接</span><br>        <span class=\"hljs-keyword\">if</span> (StompCommand.CONNECT.equals(accessor.getCommand())) &#123;<br>            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">userId</span> <span class=\"hljs-operator\">=</span> accessor.getNativeHeader(<span class=\"hljs-string\">&quot;userId&quot;</span>).get(<span class=\"hljs-number\">0</span>);<br>            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">name</span> <span class=\"hljs-operator\">=</span> userId;<br>            <span class=\"hljs-type\">Principal</span> <span class=\"hljs-variable\">principal</span> <span class=\"hljs-operator\">=</span> () -&gt; name;<br>            WebSocketManager.connect(name);<br>            accessor.setUser(principal);<br>            <span class=\"hljs-keyword\">return</span> message;<br>        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (StompCommand.DISCONNECT.equals(accessor.getCommand())) &#123;<br>            <span class=\"hljs-type\">Principal</span> <span class=\"hljs-variable\">principal</span> <span class=\"hljs-operator\">=</span> accessor.getUser();<br>            WebSocketManager.disconnect(principal.getName());<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br><br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> message;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>拦截处理连接和断开操作，Principal 设置连接的用户，之后就可以发送消息到指定用户。</p>\n<h3 id=\"常用-Command\"><a href=\"#常用-Command\" class=\"headerlink\" title=\"常用 Command\"></a>常用 Command</h3><ul>\n<li>CONNECT</li>\n<li>CONNECTED</li>\n<li>SEND</li>\n<li>SUBSRIBE</li>\n<li>UNSUBSRIBE</li>\n<li>BEGIN</li>\n<li>COMMIT</li>\n<li>ABORT</li>\n<li>ACK</li>\n<li>NACK</li>\n<li>DISCONNECT</li>\n</ul>\n<h3 id=\"消息\"><a href=\"#消息\" class=\"headerlink\" title=\"消息\"></a>消息</h3><p>服务器可以通过<code>@MessageMapping</code>方法处理请求</p>\n<p><code>SendToUser(&quot;/topic/websocket&quot;)</code>发送消息</p>\n<p>需要强调的是 web.xml 中的路径匹配问题 写为<url-pattern>&#x2F;</url-pattern>全部匹配的</p>\n<p>如果使用路径匹配<url-pattern>&#x2F;wsk&#x2F;*</url-pattern></p>\n<p>spring 中的地址不能写为&lt;websocket:mapping path&#x3D;”&#x2F;wsk&#x2F;echo” 只需要写为 &lt;websocket:mapping path&#x3D;”&#x2F;echo”就可以了,不然无法访问,这个是很多人都会遇到的坑.需特别注意</p>\n<h3 id=\"手动管理-WebSocketSession\"><a href=\"#手动管理-WebSocketSession\" class=\"headerlink\" title=\"手动管理 WebSocketSession\"></a>手动管理 WebSocketSession</h3><p>配置时添加</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">websocket:transport</span>&gt;</span><br>\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">websocket:decorator-factories</span>&gt;</span><br>\t\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;net.example.web.CustomWebSocketHandlerDecorator&quot;</span>/&gt;</span><br>\t\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">websocket:decorator-factories</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">websocket:transport</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>添加代码</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/zhyu-gao/zhyu-gao.github.io@image/uPic/carbon.png\" alt=\"carbon\"></p>\n<p>将 WebSocketSession 保存，留作后续处理</p>\n","text":"Spring 整合 websocket 设置 Maven 添加 Jar 包 123456789101112<!-- spring websocket --><d...","permalink":"/post/java/Spring整合WebSocket","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"Java","slug":"Java","count":2,"path":"api/categories/Java.json"}],"tags":[{"name":"Spring","slug":"Spring","count":1,"path":"api/tags/Spring.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Spring-%E6%95%B4%E5%90%88-websocket-%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">Spring 整合 websocket 设置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8-Command\"><span class=\"toc-text\">常用 Command</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B6%88%E6%81%AF\"><span class=\"toc-text\">消息</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%8B%E5%8A%A8%E7%AE%A1%E7%90%86-WebSocketSession\"><span class=\"toc-text\">手动管理 WebSocketSession</span></a></li></ol>","author":{"name":"Gao","slug":"blog-author","avatar":"/img/favicon.ico","link":"/","description":"一些收集总结","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Linux安装docker","uid":"50317e389506882f376cd4700774fd2f","slug":"linux/Linux安装docker","date":"2021-04-20T21:10:39.000Z","updated":"2024-11-16T08:01:11.352Z","comments":true,"path":"api/articles/linux/Linux安装docker.json","keywords":null,"cover":null,"text":"Centos 安装最新稳定版 docker 方法 脚本安装 12curl -fsSL get.docker.com -o get-docker.shsh get...","permalink":"/post/linux/Linux安装docker","photos":[],"count_time":{"symbolsCount":108,"symbolsTime":"1 mins."},"categories":[{"name":"Linux","slug":"Linux","count":3,"path":"api/categories/Linux.json"}],"tags":[{"name":"docker","slug":"docker","count":1,"path":"api/tags/docker.json"}],"author":{"name":"Gao","slug":"blog-author","avatar":"/img/favicon.ico","link":"/","description":"一些收集总结","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Somenote","uid":"d2eee44587e5bd7c8d2511537bf5b990","slug":"java/somenote","date":"2021-02-18T18:28:35.000Z","updated":"2024-11-16T08:01:11.352Z","comments":true,"path":"api/articles/java/somenote.json","keywords":null,"cover":null,"text":"1. Java 中 new Date(long date)如果是 10 位时间戳,就是秒级别的转成 date 是有问题的,成格林尼治时间需要用毫秒级的,就是 1...","permalink":"/post/java/somenote","photos":[],"count_time":{"symbolsCount":203,"symbolsTime":"1 mins."},"categories":[{"name":"记录","slug":"记录","count":1,"path":"api/categories/记录.json"}],"tags":[{"name":"随笔","slug":"随笔","count":1,"path":"api/tags/随笔.json"}],"author":{"name":"Gao","slug":"blog-author","avatar":"/img/favicon.ico","link":"/","description":"一些收集总结","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}